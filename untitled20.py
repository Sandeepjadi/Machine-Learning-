# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gGQs9lnid1u_xtaQ4e2XsxhYStvZXHS
"""

import pandas as pd

# Load the dataset
file_path = '/content/Mall_Customers.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
df.head()

# Check for missing values
missing_values = df.isnull().sum()

# Encode the 'Gender' column as numerical (Male: 0, Female: 1)
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})

# Display missing values and the dataset after encoding
missing_values, df.head()

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Selecting features for clustering
features = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Apply K-means clustering with a chosen number of clusters
kmeans = KMeans(n_clusters=5, random_state=42)
df['Cluster'] = kmeans.fit_predict(features)

# Visualize the clustering results (Age vs Annual Income vs Spending Score)
plt.figure(figsize=(10, 6))
plt.scatter(df['Age'], df['Annual Income (k$)'], c=df['Cluster'], cmap='viridis')
plt.title('Customer Segments (Clustering)')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.colorbar(label='Cluster')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Create a new binary classification column based on Spending Score
df['Spending Category'] = df['Spending Score (1-100)'].apply(lambda x: 1 if x > 50 else 0)

# Features for classification
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
y = df['Spending Category']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# K-Nearest Neighbors Classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_scaled, y_train)
knn_pred = knn.predict(X_test_scaled)

# Decision Tree Classifier
dtree = DecisionTreeClassifier(random_state=42)
dtree.fit(X_train, y_train)
dtree_pred = dtree.predict(X_test)

# Evaluate the models
knn_accuracy = accuracy_score(y_test, knn_pred)
dtree_accuracy = accuracy_score(y_test, dtree_pred)

knn_accuracy, dtree_accuracy